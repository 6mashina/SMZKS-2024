def extended_gcd(e1, e2):
    x0, x1, y0, y1 = 1, 0, 0, 1
    while e2 != 0:
        q, e1, e2 = e1 // e2, e2, e1 % e2
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1
    return e1, x0, y0


def find_coefficients(e1, e2):
    gcd, x, y = extended_gcd(e1, e2)
    if gcd == 1:
        r, s = -x, y
    elif gcd == -1:
        r, s = x, -y
    else:
        raise ValueError("Невозможно найти коэффициенты, так как НОД(e1, e2) != ±1")
    return r, s


def mod_inverse(a, mod):
    gcd, x, _ = extended_gcd(a, mod)
    if gcd != 1:
        raise ValueError(f"Обратное значение для {a} по модулю {mod} не существует")
    else:
        return x % mod


e1 = 1302293
e2 = 1300367
r, s = find_coefficients(e1, e2)

print(f"Коэффициенты: r = {r}, s = {s}")
print(f"Проверка: {r} * {e1} - {s} * {e2} = {r * e1 - s * e2}")

N = 11168908155396125547532407185205385017208097433775964348252922061124205562450889605893438208177204063073142960614153642736025426431890488245790444591999505073762871716810108379781397800567873193788261542187332784808057984070138848433410380038755129122300260693387026828115617834705460275265561276317424303897317733328825206401110932599440172712327838994078236814739804332838665774117619433110401757533427657380076667308948789610055979217942460819777703854388318398175416179806446968188588671615522115139621711103195510022865344245629204457377895174216750426938368933678497045069789946569550170810238300129206612786887
C1 = 66586582039290704038174083161924184389634137899089371089409988272180058638640255033861428779222819508672272895488891560357720829887632361677839270328140807076880115430600307156930995967538571121617260621666976507892531521898172319349661474531088918151057967833222529791819366268979556913005862935442020886123790718483586465993841208404018198304045275306157335708327900746119985396739202937012923796777178508275286295786689691770556564032201406644938811452584813826893297427513632309178215309647503729115140436044529681803365757788833623018347804196163616889338499023702815302967181179937969823590038635958544132427
C2 = 3764130863293431207682826134099049775006210820732410711413819170193106162799588690051747438588525144393823053682360296258888271031754024462159024338908463814896627877799235374732083361824659919699471767921387553381271050040897116928246482895011146542840029873738375927365935618888488358521866517647857938724577012400816619679862322702843853274790273167060644100056482742285345121367148234503520897534370361013120631505776566431210939845228498737129365548718003350151581220728002518011575743722311743578196092785873904700063882322322194655114819564886343235983941678682859180949823036165412243093504460558595757195733

c1 = pow(C1, r, N)
c2 = pow(C2, -s, N)
print(f'c1**r = {c1}\nc2**(-s) = {c2}')

multiplication = (c1 * c2)
print(f'multiplication result = {multiplication}')

result = mod_inverse(multiplication, N)
print(f'result = {result}')

result_bytes = result.to_bytes((result.bit_length() + 7) // 8, byteorder='big')  # Преобразуйте в байты
decoded_message = result_bytes.decode('windows-1251')  # Используйте 'windows-1251' для кириллицы
print(f'Расшифрованное сообщение: {decoded_message}')
